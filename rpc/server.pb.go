// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: rpc/server.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HostInfoRes) Reset() {
	*x = HostInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfoRes) ProtoMessage() {}

func (x *HostInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfoRes.ProtoReflect.Descriptor instead.
func (*HostInfoRes) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{0}
}

// package ProtobufView;
type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt string `protobuf:"bytes,4,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
	Sid       string `protobuf:"bytes,5,opt,name=Sid,proto3" json:"Sid,omitempty"`
	HostName  string `protobuf:"bytes,6,opt,name=HostName,proto3" json:"HostName,omitempty"`
	SysInfo   string `protobuf:"bytes,7,opt,name=SysInfo,proto3" json:"SysInfo,omitempty"`
	Ip        string `protobuf:"bytes,8,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Sip       string `protobuf:"bytes,9,opt,name=Sip,proto3" json:"Sip,omitempty"`
	Mem       *Mem   `protobuf:"bytes,10,opt,name=Mem,proto3" json:"Mem,omitempty"`
	Host      *Host  `protobuf:"bytes,11,opt,name=Host,proto3" json:"Host,omitempty"`
	Cpu       *Cpu   `protobuf:"bytes,12,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Disk      *Disk  `protobuf:"bytes,13,opt,name=Disk,proto3" json:"Disk,omitempty"`
	Date      int32  `protobuf:"varint,14,opt,name=Date,proto3" json:"Date,omitempty"`
	Time      string `protobuf:"bytes,15,opt,name=Time,proto3" json:"Time,omitempty"`
	LTime     string `protobuf:"bytes,16,opt,name=LTime,proto3" json:"LTime,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{1}
}

func (x *HostInfo) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *HostInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *HostInfo) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *HostInfo) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *HostInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostInfo) GetSysInfo() string {
	if x != nil {
		return x.SysInfo
	}
	return ""
}

func (x *HostInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostInfo) GetSip() string {
	if x != nil {
		return x.Sip
	}
	return ""
}

func (x *HostInfo) GetMem() *Mem {
	if x != nil {
		return x.Mem
	}
	return nil
}

func (x *HostInfo) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostInfo) GetCpu() *Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *HostInfo) GetDisk() *Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *HostInfo) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *HostInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *HostInfo) GetLTime() string {
	if x != nil {
		return x.LTime
	}
	return ""
}

type Mem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          int32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available      int32   `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Used           int32   `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent    float32 `protobuf:"fixed32,4,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	Free           int32   `protobuf:"varint,5,opt,name=free,proto3" json:"free,omitempty"`
	Active         int32   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Inactive       int32   `protobuf:"varint,7,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Wired          int32   `protobuf:"varint,8,opt,name=wired,proto3" json:"wired,omitempty"`
	Laundry        int32   `protobuf:"varint,9,opt,name=laundry,proto3" json:"laundry,omitempty"`
	Buffers        int32   `protobuf:"varint,10,opt,name=buffers,proto3" json:"buffers,omitempty"`
	Cached         int32   `protobuf:"varint,11,opt,name=cached,proto3" json:"cached,omitempty"`
	Writeback      int32   `protobuf:"varint,12,opt,name=writeback,proto3" json:"writeback,omitempty"`
	Dirty          int32   `protobuf:"varint,13,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Writebacktmp   int32   `protobuf:"varint,14,opt,name=writebacktmp,proto3" json:"writebacktmp,omitempty"`
	Shared         int32   `protobuf:"varint,15,opt,name=shared,proto3" json:"shared,omitempty"`
	Slab           int32   `protobuf:"varint,16,opt,name=slab,proto3" json:"slab,omitempty"`
	Sreclaimable   int32   `protobuf:"varint,17,opt,name=sreclaimable,proto3" json:"sreclaimable,omitempty"`
	Sunreclaim     int32   `protobuf:"varint,18,opt,name=sunreclaim,proto3" json:"sunreclaim,omitempty"`
	Pagetables     int32   `protobuf:"varint,19,opt,name=pagetables,proto3" json:"pagetables,omitempty"`
	Swapcached     int32   `protobuf:"varint,20,opt,name=swapcached,proto3" json:"swapcached,omitempty"`
	Commitlimit    int32   `protobuf:"varint,21,opt,name=commitlimit,proto3" json:"commitlimit,omitempty"`
	Committedas    int32   `protobuf:"varint,22,opt,name=committedas,proto3" json:"committedas,omitempty"`
	Hightotal      int32   `protobuf:"varint,23,opt,name=hightotal,proto3" json:"hightotal,omitempty"`
	Highfree       int32   `protobuf:"varint,24,opt,name=highfree,proto3" json:"highfree,omitempty"`
	Lowtotal       int32   `protobuf:"varint,25,opt,name=lowtotal,proto3" json:"lowtotal,omitempty"`
	Lowfree        int32   `protobuf:"varint,26,opt,name=lowfree,proto3" json:"lowfree,omitempty"`
	Swaptotal      int32   `protobuf:"varint,27,opt,name=swaptotal,proto3" json:"swaptotal,omitempty"`
	Swapfree       int32   `protobuf:"varint,28,opt,name=swapfree,proto3" json:"swapfree,omitempty"`
	Mapped         int32   `protobuf:"varint,29,opt,name=mapped,proto3" json:"mapped,omitempty"`
	Vmalloctotal   int32   `protobuf:"varint,30,opt,name=vmalloctotal,proto3" json:"vmalloctotal,omitempty"`
	Vmallocused    int32   `protobuf:"varint,31,opt,name=vmallocused,proto3" json:"vmallocused,omitempty"`
	Vmallocchunk   int32   `protobuf:"varint,32,opt,name=vmallocchunk,proto3" json:"vmallocchunk,omitempty"`
	Hugepagestotal int32   `protobuf:"varint,33,opt,name=hugepagestotal,proto3" json:"hugepagestotal,omitempty"`
	Hugepagesfree  int32   `protobuf:"varint,34,opt,name=hugepagesfree,proto3" json:"hugepagesfree,omitempty"`
	Hugepagesize   int32   `protobuf:"varint,35,opt,name=hugepagesize,proto3" json:"hugepagesize,omitempty"`
}

func (x *Mem) Reset() {
	*x = Mem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mem) ProtoMessage() {}

func (x *Mem) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mem.ProtoReflect.Descriptor instead.
func (*Mem) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{2}
}

func (x *Mem) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Mem) GetAvailable() int32 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Mem) GetUsed() int32 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Mem) GetUsedPercent() float32 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *Mem) GetFree() int32 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *Mem) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Mem) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *Mem) GetWired() int32 {
	if x != nil {
		return x.Wired
	}
	return 0
}

func (x *Mem) GetLaundry() int32 {
	if x != nil {
		return x.Laundry
	}
	return 0
}

func (x *Mem) GetBuffers() int32 {
	if x != nil {
		return x.Buffers
	}
	return 0
}

func (x *Mem) GetCached() int32 {
	if x != nil {
		return x.Cached
	}
	return 0
}

func (x *Mem) GetWriteback() int32 {
	if x != nil {
		return x.Writeback
	}
	return 0
}

func (x *Mem) GetDirty() int32 {
	if x != nil {
		return x.Dirty
	}
	return 0
}

func (x *Mem) GetWritebacktmp() int32 {
	if x != nil {
		return x.Writebacktmp
	}
	return 0
}

func (x *Mem) GetShared() int32 {
	if x != nil {
		return x.Shared
	}
	return 0
}

func (x *Mem) GetSlab() int32 {
	if x != nil {
		return x.Slab
	}
	return 0
}

func (x *Mem) GetSreclaimable() int32 {
	if x != nil {
		return x.Sreclaimable
	}
	return 0
}

func (x *Mem) GetSunreclaim() int32 {
	if x != nil {
		return x.Sunreclaim
	}
	return 0
}

func (x *Mem) GetPagetables() int32 {
	if x != nil {
		return x.Pagetables
	}
	return 0
}

func (x *Mem) GetSwapcached() int32 {
	if x != nil {
		return x.Swapcached
	}
	return 0
}

func (x *Mem) GetCommitlimit() int32 {
	if x != nil {
		return x.Commitlimit
	}
	return 0
}

func (x *Mem) GetCommittedas() int32 {
	if x != nil {
		return x.Committedas
	}
	return 0
}

func (x *Mem) GetHightotal() int32 {
	if x != nil {
		return x.Hightotal
	}
	return 0
}

func (x *Mem) GetHighfree() int32 {
	if x != nil {
		return x.Highfree
	}
	return 0
}

func (x *Mem) GetLowtotal() int32 {
	if x != nil {
		return x.Lowtotal
	}
	return 0
}

func (x *Mem) GetLowfree() int32 {
	if x != nil {
		return x.Lowfree
	}
	return 0
}

func (x *Mem) GetSwaptotal() int32 {
	if x != nil {
		return x.Swaptotal
	}
	return 0
}

func (x *Mem) GetSwapfree() int32 {
	if x != nil {
		return x.Swapfree
	}
	return 0
}

func (x *Mem) GetMapped() int32 {
	if x != nil {
		return x.Mapped
	}
	return 0
}

func (x *Mem) GetVmalloctotal() int32 {
	if x != nil {
		return x.Vmalloctotal
	}
	return 0
}

func (x *Mem) GetVmallocused() int32 {
	if x != nil {
		return x.Vmallocused
	}
	return 0
}

func (x *Mem) GetVmallocchunk() int32 {
	if x != nil {
		return x.Vmallocchunk
	}
	return 0
}

func (x *Mem) GetHugepagestotal() int32 {
	if x != nil {
		return x.Hugepagestotal
	}
	return 0
}

func (x *Mem) GetHugepagesfree() int32 {
	if x != nil {
		return x.Hugepagesfree
	}
	return 0
}

func (x *Mem) GetHugepagesize() int32 {
	if x != nil {
		return x.Hugepagesize
	}
	return 0
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname             string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Uptime               int32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	BootTime             int32  `protobuf:"varint,3,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	Procs                int32  `protobuf:"varint,4,opt,name=procs,proto3" json:"procs,omitempty"`
	Os                   string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Platform             string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformFamily       string `protobuf:"bytes,7,opt,name=platformFamily,proto3" json:"platformFamily,omitempty"`
	PlatformVersion      string `protobuf:"bytes,8,opt,name=platformVersion,proto3" json:"platformVersion,omitempty"`
	KernelVersion        string `protobuf:"bytes,9,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	KernelArch           string `protobuf:"bytes,10,opt,name=kernelArch,proto3" json:"kernelArch,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,11,opt,name=virtualizationSystem,proto3" json:"virtualizationSystem,omitempty"`
	VirtualizationRole   string `protobuf:"bytes,12,opt,name=virtualizationRole,proto3" json:"virtualizationRole,omitempty"`
	Hostid               string `protobuf:"bytes,13,opt,name=hostid,proto3" json:"hostid,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{3}
}

func (x *Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Host) GetUptime() int32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Host) GetBootTime() int32 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *Host) GetProcs() int32 {
	if x != nil {
		return x.Procs
	}
	return 0
}

func (x *Host) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Host) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Host) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *Host) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *Host) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *Host) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *Host) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *Host) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

func (x *Host) GetHostid() string {
	if x != nil {
		return x.Hostid
	}
	return ""
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu        int32    `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	VendorId   string   `protobuf:"bytes,2,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	Family     string   `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Model      string   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Stepping   int32    `protobuf:"varint,5,opt,name=stepping,proto3" json:"stepping,omitempty"`
	PhysicalId string   `protobuf:"bytes,6,opt,name=physicalId,proto3" json:"physicalId,omitempty"`
	CoreId     string   `protobuf:"bytes,7,opt,name=coreId,proto3" json:"coreId,omitempty"`
	Cores      int32    `protobuf:"varint,8,opt,name=cores,proto3" json:"cores,omitempty"`
	ModelName  string   `protobuf:"bytes,9,opt,name=modelName,proto3" json:"modelName,omitempty"`
	Mhz        float32  `protobuf:"fixed32,10,opt,name=mhz,proto3" json:"mhz,omitempty"`
	CacheSize  int32    `protobuf:"varint,11,opt,name=cacheSize,proto3" json:"cacheSize,omitempty"`
	Flags      []string `protobuf:"bytes,12,rep,name=flags,proto3" json:"flags,omitempty"`
	Microcode  string   `protobuf:"bytes,13,opt,name=microcode,proto3" json:"microcode,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{4}
}

func (x *Info) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Info) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Info) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Info) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Info) GetStepping() int32 {
	if x != nil {
		return x.Stepping
	}
	return 0
}

func (x *Info) GetPhysicalId() string {
	if x != nil {
		return x.PhysicalId
	}
	return ""
}

func (x *Info) GetCoreId() string {
	if x != nil {
		return x.CoreId
	}
	return ""
}

func (x *Info) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *Info) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Info) GetMhz() float32 {
	if x != nil {
		return x.Mhz
	}
	return 0
}

func (x *Info) GetCacheSize() int32 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *Info) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Info) GetMicrocode() string {
	if x != nil {
		return x.Microcode
	}
	return ""
}

type Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32   `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Percent int32   `protobuf:"varint,2,opt,name=Percent,proto3" json:"Percent,omitempty"`
	Info    []*Info `protobuf:"bytes,3,rep,name=Info,proto3" json:"Info,omitempty"`
}

func (x *Cpu) Reset() {
	*x = Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cpu) ProtoMessage() {}

func (x *Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cpu.ProtoReflect.Descriptor instead.
func (*Cpu) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{5}
}

func (x *Cpu) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Cpu) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *Cpu) GetInfo() []*Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Fstype            string  `protobuf:"bytes,2,opt,name=fstype,proto3" json:"fstype,omitempty"`
	Total             int32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Free              int32   `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	Used              int32   `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent       float32 `protobuf:"fixed32,6,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	InodesTotal       int32   `protobuf:"varint,7,opt,name=inodesTotal,proto3" json:"inodesTotal,omitempty"`
	InodesUsed        int32   `protobuf:"varint,8,opt,name=inodesUsed,proto3" json:"inodesUsed,omitempty"`
	InodesFree        int32   `protobuf:"varint,9,opt,name=inodesFree,proto3" json:"inodesFree,omitempty"`
	InodesUsedPercent float32 `protobuf:"fixed32,10,opt,name=inodesUsedPercent,proto3" json:"inodesUsedPercent,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{6}
}

func (x *Disk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Disk) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *Disk) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Disk) GetFree() int32 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *Disk) GetUsed() int32 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Disk) GetUsedPercent() float32 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *Disk) GetInodesTotal() int32 {
	if x != nil {
		return x.InodesTotal
	}
	return 0
}

func (x *Disk) GetInodesUsed() int32 {
	if x != nil {
		return x.InodesUsed
	}
	return 0
}

func (x *Disk) GetInodesFree() int32 {
	if x != nil {
		return x.InodesFree
	}
	return 0
}

func (x *Disk) GetInodesUsedPercent() float32 {
	if x != nil {
		return x.InodesUsedPercent
	}
	return 0
}

var File_rpc_server_proto protoreflect.FileDescriptor

var file_rpc_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x22, 0x82, 0x03, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53,
	0x69, 0x70, 0x12, 0x16, 0x0a, 0x03, 0x4d, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x04, 0x2e, 0x4d, 0x65, 0x6d, 0x52, 0x03, 0x4d, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x04, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x03, 0x43, 0x70, 0x75, 0x12, 0x19, 0x0a,
	0x04, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x08, 0x0a, 0x03, 0x4d, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x75, 0x6e, 0x64, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x61, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6c, 0x61, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x65, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75,
	0x6e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x77,
	0x61, 0x70, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x77, 0x61, 0x70, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x61, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x61, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x69, 0x67, 0x68, 0x66, 0x72, 0x65, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x68, 0x69, 0x67, 0x68, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x77, 0x66, 0x72, 0x65, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x77, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x77, 0x61, 0x70, 0x66, 0x72, 0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x77, 0x61, 0x70, 0x66, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6d, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6d,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x75,
	0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x68, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x75, 0x67, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x66, 0x72, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x75, 0x67, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x03, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x12,
	0x32, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x68, 0x7a, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x68, 0x7a, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x03,
	0x43, 0x70, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa2,
	0x02, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x46,
	0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x32, 0x4e, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x53, 0x61, 0x76, 0x65, 0x12, 0x09, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x0c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x20, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x1a, 0x09, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_server_proto_rawDescOnce sync.Once
	file_rpc_server_proto_rawDescData = file_rpc_server_proto_rawDesc
)

func file_rpc_server_proto_rawDescGZIP() []byte {
	file_rpc_server_proto_rawDescOnce.Do(func() {
		file_rpc_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_server_proto_rawDescData)
	})
	return file_rpc_server_proto_rawDescData
}

var file_rpc_server_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_rpc_server_proto_goTypes = []interface{}{
	(*HostInfoRes)(nil), // 0: HostInfoRes
	(*HostInfo)(nil),    // 1: HostInfo
	(*Mem)(nil),         // 2: Mem
	(*Host)(nil),        // 3: Host
	(*Info)(nil),        // 4: Info
	(*Cpu)(nil),         // 5: Cpu
	(*Disk)(nil),        // 6: Disk
}
var file_rpc_server_proto_depIdxs = []int32{
	2, // 0: HostInfo.Mem:type_name -> Mem
	3, // 1: HostInfo.Host:type_name -> Host
	5, // 2: HostInfo.Cpu:type_name -> Cpu
	6, // 3: HostInfo.Disk:type_name -> Disk
	4, // 4: Cpu.Info:type_name -> Info
	1, // 5: Service.Save:input_type -> HostInfo
	0, // 6: Service.Get:input_type -> HostInfoRes
	0, // 7: Service.Save:output_type -> HostInfoRes
	1, // 8: Service.Get:output_type -> HostInfo
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rpc_server_proto_init() }
func file_rpc_server_proto_init() {
	if File_rpc_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_server_proto_goTypes,
		DependencyIndexes: file_rpc_server_proto_depIdxs,
		MessageInfos:      file_rpc_server_proto_msgTypes,
	}.Build()
	File_rpc_server_proto = out.File
	file_rpc_server_proto_rawDesc = nil
	file_rpc_server_proto_goTypes = nil
	file_rpc_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Save(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*HostInfoRes, error)
	Get(ctx context.Context, in *HostInfoRes, opts ...grpc.CallOption) (*HostInfo, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Save(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*HostInfoRes, error) {
	out := new(HostInfoRes)
	err := c.cc.Invoke(ctx, "/Service/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Get(ctx context.Context, in *HostInfoRes, opts ...grpc.CallOption) (*HostInfo, error) {
	out := new(HostInfo)
	err := c.cc.Invoke(ctx, "/Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Save(context.Context, *HostInfo) (*HostInfoRes, error)
	Get(context.Context, *HostInfoRes) (*HostInfo, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Save(context.Context, *HostInfo) (*HostInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedServiceServer) Get(context.Context, *HostInfoRes) (*HostInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Save(ctx, req.(*HostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfoRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*HostInfoRes))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Service_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Service_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/server.proto",
}
